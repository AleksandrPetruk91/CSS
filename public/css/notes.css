/* Абстрактний кореневий батьківський тег HTML  */
:root {
  background: rgb(190, 120, 87);
}

html {
  max-width: 720px;
}

body {
  background: #ffffff;
}

/* Для всіх тегів на сорінці */
* {
  color: rgb(177, 64, 64);
}

/* До всіх вказаних тегів */
h1 {
  color: #140d74;
}

/* До всіх тегів де вказаний class="card"  */
.card {
  background: #140d74;
}

/* До всіх тегів де вказаний id="user" */
#user {
  color: red;
}

/* Перелік селекторів для яких вказаний стиль CSS */
h1,
.box,
#user {
  color: red;
}

/* Для всіх тегів <p>,які є дочірніми тегу <div> */
div > p {
  color: black;
}

/* Для всіх тегів,які є нащадками section та де є клас .dox  */
section .dox {
  color: rgb(255, 255, 255);
}

/* Для тегу p,який іде відразу після h1 */
h1 + p {
  color: blue;
}

/* Для всіх тегів div,який ідуть відразу після h1 */
h1 ~ div {
  color: blue;
}

/* Перший тег зі списку в батьківському тегу ul */
ul > li:first-child {
  color: blue;
}

/* Останній тег зі списку в батьківському тегу ul */
ul > li:last-child {
  color: rgb(113, 212, 127);
}

/* Стилізує тег якщо він одиночний у своєму роді всередені батьківського тегу ul*/
ul > li:only-child {
  color: rgb(113, 212, 127);
}

/* Обирає тег який іде першим у списку серед таких же тегів */
p:first-of-type {
  color: rgb(113, 212, 127);
}

/* Обирає тег який іде останнім у списку серед таких же тегів */
p:last-of-type {
  color: rgb(113, 212, 127);
}

/* Обирає тег який єдиний у свому роді у списку  тегів */
p:only-of-type {
  color: rgb(113, 212, 127);
}

/* Вказує який по порядку тег сред братів та сестер */
div:nth-child(6) {
  color: blue;
}

/* Обирає парні теги серед братів та сестер */
div:nth-child(even) {
  color: blue;
}

/* Обирає не парні теги серед братів та сестер */
p:nth-child(odd) {
  color: blue;
}

/* Обирає кожен третій тег, починаємо рахувати з другого */
div:nth-child(3n + 2) {
  color: blue;
}

/* Обирає кожен третій тег, починаємо рахувати з кінця */
div:nth-last-child(3) {
  color: blue;
}

/* Кожен другий тег серед свого виду */
p:nth-of-type(2n) {
  color: aquamarine;
}

/* Кожен другий тег серед свого виду з кінця */
p:nth-last-of-type(2n) {
  color: aquamarine;
}

/* Усі теги div, окрім тегу з класом 'сard' */
.div:not(.card) {
  color: blue;
}

/* Для пустого тегу типу <div></div> */
div:empty {
  height: 20px;
  background: #33289b;
}

/* Тег в якому є вказаний атрибут */
div[required] {
  background: #831f4d;
}

/* Тег із вказаним атрибутом та значенням */
p[type='number'] {
  background: #140d74;
}

/* (Обирає якщо в списку атрибутів є вказаний) */
.input-dark[rel~='external'] {
  height: 30px;
  background: #9ab819;
}

/* (список атрибутів починається з 'btn') */
button[class|='btn'] {
  background: red;
}

/* (атрибут значення якого починається з 'btn') */
button[class^='btn'] {
  background: rgb(116, 30, 30);
}

/* (Обирає якщо в значенні атрибута присутнє "...sec...") */
button[class*='sec'] {
  background: rgb(189, 171, 171);
}

/* (Якщо значення закінчується на 'primary') */
button[class$='primary'] {
  background: rgb(87, 141, 51);
}

/* (Стилізує першу літеру вказаного рядка) */
p::first-letter {
  color: blue;
}

/* (Перший рядок тексту) */
p::first-line {
  color: rgb(52, 219, 46);
}

/* (Стилізує placeholder в input) */
.input::placeholder {
  color: rgb(36, 150, 93);
}

/* (Вставляє контент перед основним текстом) */
p::before {
  content: '$$$';
  color: blueviolet;
}

/* (Вставляє контент після тексту) */
p::after {
  content: '$$$';
  color: blueviolet;
}

/* Cтилізує якщо активна сторінка з даним посиланням */
#test:target {
  color: red;
}

/* Посилання на яке ще не заходили */
.link:link {
  color: blueviolet;
}

/* Посилання на яке навели микою */
.link:hover {
  color: rgb(255, 233, 30);
}

/* Посилання на якому натиснений курсор */
.link:active {
  color: rgb(13, 1, 85);
}

/* Посилання на якому натиснений курсор,для input */
.link:focus {
  color: rgb(93, 89, 116);
}

/* Якщо поле імпута активне */
input:focus {
  background-color: rgb(71, 207, 139);
}

/* Якщо форма в фокусі */
.card:focus-within {
  background-color: rgb(71, 207, 139);
}

/* Якщо в тезі є class="card" і "lang="fr" */
.card:lang(fr) {
  background-color: rgb(153, 206, 179);
}

/* Тег з активним посиланням */
button:enabled {
  background-color: rgb(153, 206, 179);
}

/* Тег із атрибутом disabled */
button:disabled {
  background-color: rgb(153, 206, 179);
}

/* Тег для активного input */
input:read-write {
  background-color: rgb(153, 206, 179);
}

/* Тег для неактивного input */
input:read-only {
  background-color: rgb(153, 206, 179);
}

/* Тег тексту біля активного checkbox*/
input[checkbox]:checked ~ span {
  background-color: rgb(153, 206, 179);
}

/* Для полявводу що є валідним, є атрибут valid*/
input:valid {
  background-color: rgb(153, 206, 179);
}

/* Для полявводу яку не є валідним */
input:invalid {
  background-color: rgb(153, 206, 179);
}

/* Для полявводу яку 'є необовїязковим'*/
input:invalid {
  background-color: rgb(153, 206, 179);
}

/* Для input type="number" коли виходить за межі min max*/
.number:out-of-range {
  background-color: rgb(153, 206, 179);
}

/* Для input type="number" коли входить в межі min max*/
.number:in-range {
  background-color: rgb(153, 206, 179);
}

/* Для input коли активний playceholder*/
.input:placeholder-shown ~ span {
  background-color: red;
}

/* Колір RGB плюс прозорість */
.card > p {
  color: rgba(196, 72, 72, 0.788);
}

/* Напрямок тексту з права на ліво і навпаки ltr */
p {
  direction: rtl;
}

/*Значення властивості за замовчуванням  */
.card > p {
  color: initial;
}

/* Знач. власт. успадковуються від батьківського тегу */
.card > p {
  color: inherit;
}

/* Знач. власт. успадковуються від батьківського тегу,якщо це можливо */
.card > p {
  color: unset;
}

/* Скачовує всі значення властивості */
.card > p {
  color: none;
}

/* Орієнтація тексту */
div {
  writing-mode: vertical-lr;
  writing-mode: vertical-rl;
}

/* Вирівнюванн тексту */
div {
  text-align: center;
  text-align: left;
  text-align: right;
}

/* Зміна регістру букв */
div {
  text-transform: uppercase;
  text-transform: lowercase;
  text-transform: capitalize;
}

/* Встановлення розміру Tab */
pre {
  tab-size: 5;
}

/* Розмір між символами в тексті */
p {
  letter-spacing: normal;
  letter-spacing: 1em;
  letter-spacing: 1px;
}

/* Декорації то тексту */
p {
  text-decoration: underline dotted red;

  text-decoration-line: underline;
  text-decoration-line: overline;
  text-decoration-line: line-through;

  text-decoration-style: solid;
  text-decoration-style: double;
  text-decoration-style: dotted;
  text-decoration-style: dashed;
  text-decoration-style: wavy;

  text-decoration-color: red;
}

/* Шрифт через google.fonts */
body {
  font-family: 'Roboto' sans-serif;
}

/* Розмір шрифту */

p {
  font-size: 2px;
  font-size: small;
  font-size: medium;
  font-size: large;
  font-size: xx-large;
  font-size: smaller;
  font-size: larger;
}

/* Жирність шрифта */
p {
  font-weight: 400;
  font-weight: bolder;
  font-weight: lighter;
}

/* Стиль шрифта */
p {
  font-style: italic;
}

/* Прогрузка шрифта */
h1 {
  font-display: swap;
}

/* Приховує даний контент */
.test {
  display: none;
}

/*Рядковий  елемент стає блочним */
span {
  display: block;
}

/* Блочний елемент стає лінійним */
div {
  display: inline;
}

/* Лінійний елемент стає блочно-лінійним*/
em {
  display: inline-block;
}

/* Відступи блоку */

div {
  margin: auto;
  margin: 0%;
  margin: 23px;
}

/* Ширина блоку */

div {
  /* Відносно бфтьківського блоку */
  width: 50%;
  /* По ширині контенту */
  width: fit-content;
  /* Мінімальна ширина контенту */
  width: min-content;
  width: max-content;
}

/* Внутрішні відступи */
div {
  padding: 12px;
  padding: 0%;
}

/* Висота елементу */
div {
  height: 100p;
  height: fit-content;
  height: max-content;
  height: min-content;
}

/* Мінімальга висота */
div {
  min-height: max-content;
}

/* Максимальна висота */
div {
  max-height: fit-content;
}
